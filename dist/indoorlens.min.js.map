{
  "version": 3,
  "sources": ["../js/models.js", "../js/control.js", "../js/preview.js", "../js/cloud.js", "../js/inputs.js", "../js/indoorlenswidjet.js", "../js/indoorlens.js"],
  "sourcesContent": ["/* ===== models.js ===== */\n\n/* 1. Enum \u2192\u202Fa plain frozen object */\n// models.js\nexport const RenderType = Object.freeze({\n  Path: 0,\n  LineShape: 1,\n  SurfaceShape: 2,\n  Transition_NonWCHR: 3,\n  Transition_WCHR: 4,\n  Location: 5\n});\n\nexport const RenderTypeName = Object.freeze({\n  0: 'Path',\n  1: 'LineShape',\n  2: 'SurfaceShape',\n  3: 'Transition_NonWCHR',\n  4: 'Transition_WCHR',\n  5: 'Location'\n});\n\n\n/* -------- Layer color palette -------- */\n/** Colors assigned to layer0, layer1, \u2026  */\nexport const LayerColors = [\n  '#EAEAEA', // layer0\n  '#DDE1E2', // layer1\n  '#C9CED2', // layer2\n  '#C1C3C7', // layer3\n  '#586974'  // layer4\n];\n\nexport const NavigationColors = [\n  '#1e81b0', // blue\n   '#c41837', // red\n  '#00b359', // green\n \n];\n\n\n/** Convenience: get a color by numeric layer index */\nexport function getLayerColor(index) {\n  return LayerColors[index % LayerColors.length]; // wraps if index exceeds palette\n}\n\n/* -------- NodeModel -------- */\nexport class NodeModel {\n  /** @param {object} src  parsed JSON for a node */\n  constructor(src = {}) {\n    this.position = new Vec3(src.position);\n    this.associatedBranches = [...(src.associatedBranchKeys ?? [])];\n    this.guid = src.GUID ?? null;\n    //   this.selected           = !!src.selected;\n  }\n}\n\n/* -------- BranchModel -------- */\nexport class BranchModel {\n  /** @param {object} src  parsed JSON for a branch */\n  constructor(src = {}) {\n    this.key = src.key ?? 0;\n    this.groupId = src.groupId ?? '';\n    this.layerId = src.layerId ?? '';\n    this.nodeDistances = [...(src.nodeDistances ?? [])];\n\n    /* map every node object \u2192 NodeModel instance */\n    this.nodes = (src.nodes ?? []).map(n => new NodeModel(n));\n  }\n}\n\n/* -------- Path Finding -------- */\nexport class FloorResultModel {\n  /** @param {object} src  parsed JSON for a branch */\n  constructor(src = {}) {\n\n    this.nodes = (src.Nodes ?? []).map(n => new Vec3({ x: n.X ?? 0, y: n.Y ?? 0, z: n.Z ?? 0 }));\n    this.startBranchKey = src.StartBranchKey ?? '';\n    this.endBranchKey = src.EndBranchKey ?? '';\n    this.pathLength = src.PathLength ?? '';\n    this.fromId = src.FromMapLocationId ?? '';\n    this.toId = src.ToMapLocationId ?? '';\n  }\n}\n\nexport class PathFindingResultData {\n  /**\n   * @param {object<string,object>} src\n   *   parsed JSON of the form { [branchKey]: FloorResultModelPayload, \u2026 }\n   */\n  constructor(src = {}) {\n    /** @type {Record<string, FloorResultModel>} */\n    this.floors = {};\n\n    // Iterate over each [groupId, floorPayload] pair\n    for (const [groupId, floorPayload] of Object.entries(src)) {\n      this.floors[groupId] = new FloorResultModel(floorPayload);\n    }\n  }\n}\n \n/* 2. LayerModel (one layer within a group) */\nexport class LayerModel {\n  /** @param {object} src  plain JSON from Unity */\n  constructor(src = {}) {\n    this.id = src.id ?? '';\n    this.lineThickness = src.lineThickness ?? 1;\n    /* Unity Color {r,g,b,a} \u2192 CSS rgba() string */\n    const c = src.color ?? { r: 1, g: 1, b: 1, a: 1 };\n    this.color = `rgba(${c.r * 255},${c.g * 255},${c.b * 255},${c.a})`;\n    this.enabled = !!src.enabled;\n    this.renderType = Number(src.renderType) ?? RenderType.Path;\n  }\n}\n\n/* 3. GroupModel (owns a list of layers) */\nexport class GroupModel {\n  /** @param {object} src  plain JSON from Unity */\n  constructor(src = {}) {\n    this.layers = (src.layers ?? []).map(l => new LayerModel(l));\n    this.id = src.id ?? '';\n    this.groupName = src.groupName ?? '';\n    this.roofHeight = src.roofHeight ?? 0;\n    this.enabled = !!src.enabled;\n    this.opacity = src.opacity ?? 1;\n  }\n}\n\n/* -------- root wrapper (matches Unity save file) -------- */\nexport class SplineData {\n  constructor(src = {}) {\n    /* raw JSON has branches:[...] at the root */\n    // this.branches = (src.branches ?? []).map(b => new BranchModel(b));\n\n    this.branches = (src.branches ?? []).reduce((dict, bData) => {\n      const branch = new BranchModel(bData);\n      dict[branch.key] = branch;\n      return dict;\n    }, /** @type {Record<string, BranchModel>} */({}));\n\n    this.groups = (src.groups ?? []).map(g => new GroupModel(g));\n  }\n}\n\nexport const LocationType = Object.freeze({\n  Custom: 0,  // Default for unknown locations\n  Entrance: 1,  // Main building entry/exit\n  Exit: 2,  // Dedicated exit points\n  Information: 3,  // Help desk or info kiosk\n  Restroom: 4,  // Public or private restrooms\n  Elevator: 5,  // Vertical transportation\n  Escalator: 6,  // Moving stairs\n  Stairs: 7,  // Regular staircases\n  Parking: 8,  // Parking areas or garages\n  AccessibleRamp: 9,  // Ramps for wheelchairs\n  ATM: 10, // Cash withdrawal machines\n  FirstAid: 11, // Medical or emergency assistance\n  Security: 12, // Security office or checkpoint\n  FireExtinguisher: 13, // Fire safety equipment\n  EmergencyExit: 14, // Emergency-only exits\n  LostAndFound: 15, // Lost items retrieval\n  WaitingArea: 16, // Seating or resting spaces\n  ChargingStation: 17, // Phone/laptop charging point\n  VendingMachine: 18, // Snacks and drinks dispenser\n  Cafeteria: 19, // Dining or food court\n  WaterFountain: 20, // Public drinking water station\n  SmokingArea: 21, // Designated smoking zone\n  Playground: 22, // Kids' play area\n  GreenSpace: 23,\n  Kiosk: 24, // IndoorLens kiosk\n  Current_Kiosk: 25  // IndoorLens current kiosk\n});\n\nexport const LocationTypeName = Object.freeze({\n  0: 'Custom',\n  1: 'Entrance',\n  2: 'Exit',\n  3: 'Information',\n  4: 'Restroom',\n  5: 'Elevator',\n  6: 'Escalator',\n  7: 'Stairs',\n  8: 'Parking',\n  9: 'AccessibleRamp',\n  10: 'ATM',\n  11: 'FirstAid',\n  12: 'Security',\n  13: 'FireExtinguisher',\n  14: 'EmergencyExit',\n  15: 'LostAndFound',\n  16: 'WaitingArea',\n  17: 'ChargingStation',\n  18: 'VendingMachine',\n  19: 'Cafeteria',\n  20: 'WaterFountain',\n  21: 'SmokingArea',\n  22: 'Playground',\n  23: 'GreenSpace',\n  24: 'Kiosk',\n  25: 'Current_Kiosk'\n});\n\nexport const LocationDisplayType = Object.freeze({\n  None: 0,\n  Icon: 1,\n  Label: 2\n});\n\nexport const LocationDisplayTypeName = Object.freeze({\n  0: 'None',\n  1: 'Icon',\n  2: 'Label'\n});\n\nexport class LocationModel {\n  constructor(src = {}) {\n    /* raw JSON has branches:[...] at the root */\n    this.branchKey = src.branchKey ?? 0;\n    this.distance = src.distance ?? 0;\n\n  }\n\n}\n\n\nexport class MapLocationModel {\n  constructor(src = {}) {\n    /* raw JSON has branches:[...] at the root */\n    this.id = src.id ?? '';\n    this.name = src.name ?? '';\n    this.tags = src.tags ?? '';\n    this.groupId = src.groupId ?? '';\n    this.center = new Vec3(src.center);\n    this.locationType = Number(src.locationType) ?? LocationType.Custom;\n    this.locationDisplayType = Number(src.locationDisplayType) ?? LocationDisplayType.Custom;\n    this.locations = (src.locations ?? []).map(b => new LocationModel(b));\n    this.surfaceBranchKeys = [...(src.surfaceBranchKeys ?? [])];\n  }\n}\n\n\nexport class MapData {\n  constructor(src = {}) {\n    /* raw JSON has branches:[...] at the root */\n    this.id = src.id ?? '';\n    this.name = src.name ?? '';\n    this.tags = src.tags ?? '';\n    this.locations = (src.locations ?? []).map(b => new MapLocationModel(b));\n  }\n}\n\nexport class Vec3 {\n  /**\n   * @param {{ X?: number, Y?: number, Z?: number, x?: number, y?: number, z?: number }} obj\n   */\n  constructor(obj = {}) {\n    // pick whichever casing your JSON has\n    this.x = obj.x ?? obj.X ?? 0;\n    this.y = obj.y ?? obj.Y ?? 0;\n    this.z = obj.z ?? obj.Z ?? 0;\n  }\n}\n", "import { drawMainCanvas } from \"./preview.js\";\nexport let scale = 10; // current zoom\nexport let rotation = 0;          // radians\nexport let pan = { x: 0, y: 0 }; // current pan offset (in screen px)\n\nlet isDragging = false;\nlet lastMousePos = { x: 0, y: 0 };\n\n\n\n// --- programmatic pan / zoom / rotate setter -------------------------------\nexport function applyView({\n    panX = pan.x,\n    panY = pan.y,\n    rotation: newRotation,\n    scale: newScale,\n} = {}) {\n    scale = newScale;\n    rotation= newRotation\n    pan = { x: panX, y: panY };\n\n    drawMainCanvas();\n}\n\nexport function attachControls(canvas) {\n\n    /* ---------- unified wheel handler (smooth rotation, pan, zoom) ---------- */\n    let rotating = false;                // true while in rotation inertia\n    let rotateVelocity = 0;              // keep last angular speed\n    let lastWheelTime = 0;\n\n    canvas.addEventListener(\"wheel\", e => {\n        const factor = (e.deltaMode === 1 ? 15 : 1);   // normalize units\n        const now = performance.now();\n\n        const rect = canvas.getBoundingClientRect();\n        // calculate pointer offset in CSS pixels relative to canvas center\n        const mx = e.clientX - rect.left - (rect.width / 2) - pan.x;\n        const my = e.clientY - rect.top - (rect.height / 2) - pan.y;\n\n        /* -- if inertia is active but Alt is no longer held and the user is\n             performing a predominantly vertical wheel (deltaY > deltaX),\n             stop the rotation so a new zoom gesture can begin -- */\n        if (rotating && !e.altKey && Math.abs(e.deltaY) > Math.abs(e.deltaX)) {\n            rotating = false;   // cancel inertia\n            rotateVelocity = 0;\n        }\n\n        /* ---------- ROTATE (Alt or inertia) ---------- */\n        if (e.altKey) rotating = true;                 // start / keep rotation\n\n        if (rotating) {\n            e.preventDefault();\n\n            // Some drivers emit rotation as deltaX, others as deltaX + deltaY.\n            const dTheta = (e.deltaX || -e.deltaY) * 0.002 * factor;\n            rotation += dTheta;\n            rotateVelocity = dTheta;\n            lastWheelTime = now;\n\n            // keep pivot fixed\n            const r = rot(mx, my, dTheta);\n            pan.x += mx - r.x;\n            pan.y += my - r.y;\n\n            drawMainCanvas();\n            return;\n        }\n\n        /* ---------- PAN (Shift) ---------- \n        if (e.shiftKey) {\n            e.preventDefault();\n            pan.x -= e.deltaX * factor;\n            pan.y -= e.deltaY * factor;\n            drawMainCanvas();\n            return;\n        }*/\n\n        /* ---------- ZOOM (default) ------- */\n        e.preventDefault();\n        const z = Math.exp(-e.deltaY * 0.0015 * factor);\n        scale *= z;\n        pan.x -= mx * (z - 1);\n        pan.y -= my * (z - 1);\n        drawMainCanvas();\n    }, { passive: false });\n\n\n    let lastTouches = [];\n    canvas.addEventListener(\"touchstart\", e => {\n        e.preventDefault();\n        lastTouches = [...e.touches];\n    }, { passive: false });\n\n    canvas.addEventListener(\"touchmove\", e => {\n        e.preventDefault();\n        const [t0, t1] = lastTouches;\n        const [u0, u1] = e.touches;\n\n        if (e.touches.length === 1) {\n            // pan\n            const dx = u0.clientX - t0.clientX;\n            const dy = u0.clientY - t0.clientY;\n            pan.x += dx;\n            pan.y += dy;\n        }\n        else if (e.touches.length === 2) {\n            // midpoint before and after for pivot\n            const prevMidX = (t0.clientX + t1.clientX) / 2;\n            const prevMidY = (t0.clientY + t1.clientY) / 2;\n            const currMidX = (u0.clientX + u1.clientX) / 2;\n            const currMidY = (u0.clientY + u1.clientY) / 2;\n\n            // PINCH-ZOOM\n            const prevDist = Math.hypot(t1.clientX - t0.clientX, t1.clientY - t0.clientY);\n            const currDist = Math.hypot(u1.clientX - u0.clientX, u1.clientY - u0.clientY);\n            const z = currDist / prevDist;\n            scale *= z;\n\n            // ROTATE around midpoint\n            const prevAng = Math.atan2(t1.clientY - t0.clientY, t1.clientX - t0.clientX);\n            const currAng = Math.atan2(u1.clientY - u0.clientY, u1.clientX - u0.clientX);\n            const dAng = currAng - prevAng;\n            rotation += dAng;\n\n            // adjust pan so the midpoint stays fixed\n            pan.x += (currMidX - prevMidX);\n            pan.y += (currMidY - prevMidY);\n        }\n\n        lastTouches = [...e.touches];\n        drawMainCanvas();\n    }, { passive: false });\n\n    // ----- mouse drag panning -----\n    canvas.addEventListener(\"mousedown\", e => {\n        e.preventDefault();\n        isDragging = true;\n        lastMousePos.x = e.clientX;\n        lastMousePos.y = e.clientY;\n    });\n\n    window.addEventListener(\"mousemove\", e => {\n        if (!isDragging) return;\n        e.preventDefault();\n        const dx = e.clientX - lastMousePos.x;\n        const dy = e.clientY - lastMousePos.y;\n        pan.x += dx;\n        pan.y += dy;\n        lastMousePos.x = e.clientX;\n        lastMousePos.y = e.clientY;\n        drawMainCanvas();\n    });\n\n    window.addEventListener(\"mouseup\", e => {\n        if (isDragging) {\n            isDragging = false;\n        }\n    });\n\n    canvas.addEventListener(\"mouseleave\", e => {\n        isDragging = false;\n    });\n\n    /* ----- inertia ticker: let rotation glide to a stop ----- */\n    function tick() {\n        requestAnimationFrame(tick);\n\n        if (!rotating) return;\n\n        const now = performance.now();\n        const dt = (now - lastWheelTime) / 1000;   // seconds since last wheel\n\n        // basic friction model\n        rotateVelocity *= 0.94 ** (dt * 60);\n        if (Math.abs(rotateVelocity) < 0.0001) {\n            rotating = false;\n            return;\n        }\n\n        rotation += rotateVelocity;\n        drawMainCanvas();\n    }\n    tick();\n}\n\nfunction rot(vx, vy, angle) {\n    const cos = Math.cos(angle), sin = Math.sin(angle);\n    return { x: vx * cos - vy * sin, y: vx * sin + vy * cos };\n}", "import { SplineData, MapData, PathFindingResultData, RenderType, NavigationColors, LocationTypeName, LocationDisplayType, Vec3 } from './models.js'; // \nimport { scale, rotation, pan, attachControls , applyView} from \"./control.js\";\nimport { groupIndex,   updateFloor, focusOnSurface } from \"./inputs.js\";\n\n\n\n// adjust path as needed\nexport let canvasMain = null;\nexport let canvasOverlay = null;\nexport let ctx = null;\nexport let ctxOverlay = null;\nlet animationFrameId = null;\nlet circlePos = null;\n/** give the module a canva  let circlePos = null;s *after* it exists in the DOM */\nexport function initCanvas(_canvasMain, _canvasOverlay) {\n    canvasMain = _canvasMain;\n    canvasOverlay = _canvasOverlay;\n    ctx = _canvasMain.getContext(\"2d\");\n    ctxOverlay = _canvasOverlay.getContext(\"2d\");\n    // Sync overlay canvas size to match main canvas\n    canvasOverlay.width = canvasMain.width;\n    canvasOverlay.height = canvasMain.height;\n    // Clear any previous overlay content\n    ctxOverlay.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n    attachControls(canvasMain);        // wheel / pan / zoom handlers\n}\n\nexport let pathFindingResultData = null;\nexport let pathData = null;\nexport let layoutData = null;\nexport let mapData = null;\n\n\n/* ---------- main draw loop ---------- */\nexport function drawMainCanvas() {\n    if (!layoutData) return;          // nothing to draw yet\n\n\n    ctx.save();\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, canvasMain.width, canvasMain.height);\n\n    // centre + pan + zoom\n    // ctx.translate(canvas.width / 2 + pan.x, canvas.height / 2 + pan.y);\n\n    // measure on\u2010screen size\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvasMain.getBoundingClientRect();\n    // calculate the pivot in buffer\u2010pixel units\n    const pivotX = (rect.width / 2 + pan.x) * dpr;\n    const pivotY = (rect.height / 2 + pan.y) * dpr;\n\n    // move the origin to the correct buffer\u2010unit pivot\n    ctx.translate(pivotX, pivotY);\n    ctx.rotate(rotation);\n    ctx.scale(scale, scale);\n\n    /* ----- draw layout ----- */\n    for (let g = 0; g < layoutData.groups.length; g++) {\n\n        if (g == groupIndex) ctx.globalAlpha = 1;\n        else {\n            if (g !== groupIndex && g > groupIndex) ctx.globalAlpha = 0;\n            else if (g !== groupIndex && g < groupIndex) ctx.globalAlpha = 0.2;\n        }\n        const group = layoutData.groups[g];\n\n        for (const layer of group.layers) {\n            if (layer.renderType === RenderType.SurfaceShape) {\n                drawSurface(layer, group);\n            } else if (layer.renderType === RenderType.LineShape) {\n                drawLine(layer, group);\n            }\n        }\n    }\n    // console.log(\"scale:\", scale);\n\n    const alpha = labelAlpha(scale);\n    if (alpha > 0) {\n        ctx.globalAlpha = alpha;\n        /* ----- draw path\u2011finding surfaces (zoom\u2011dependent) ----- */\n        if (pathFindingResultData) {\n            for (const [groupId, floorResult] of Object.entries(pathFindingResultData.floors)) {\n\n                if (getGroupIndex(groupId) != groupIndex) continue;\n                const fromLoc = getMapLocation(floorResult.fromId);\n                const toLoc = getMapLocation(floorResult.toId);\n                // draw under current zoom so the polygons scale\n\n                //only draw the surface if the location is transit\n                if (LocationTypeName[fromLoc.locationType] == 'Stairs' || LocationTypeName[fromLoc.locationType] == 'Elevator') {\n                    drawMapLocationSurface(fromLoc, NavigationColors[0]);   // base blue\n                }\n                if (LocationTypeName[toLoc.locationType] == 'Stairs' || LocationTypeName[toLoc.locationType] == 'Elevator') {\n                    drawMapLocationSurface(toLoc, NavigationColors[0]);\n                }\n            }\n        }\n        // override colours for start / end\n        let fromMapLocation = getMapLocation(  window.IndoorLens.fromid );\n        let toMapLocation = getMapLocation(  window.IndoorLens.toid );\n\n        if (fromMapLocation && getGroupIndex(fromMapLocation.groupId) === groupIndex) drawMapLocationSurface(fromMapLocation, NavigationColors[2]); //  \n        if (toMapLocation && getGroupIndex(toMapLocation.groupId) === groupIndex) drawMapLocationSurface(toMapLocation, NavigationColors[1]); // red\n\n        /* ----- draw path polyline (zoomed) ----- */\n        if (pathFindingResultData) {\n            for (const [groupId, floorResult] of Object.entries(pathFindingResultData.floors)) {\n\n                if (getGroupIndex(groupId) != groupIndex) continue;\n                const verts = floorResult.nodes;\n                if (verts.length > 0) {\n                    ctx.save();\n                    ctx.lineWidth = 2 / scale;   // keep 2px on\u2011screen\n                    ctx.strokeStyle = NavigationColors[0];\n                    ctx.beginPath();\n                    ctx.moveTo(verts[0].x, verts[0].z);\n                    for (let k = 1; k < verts.length; k++) {\n                        ctx.lineTo(verts[k].x, verts[k].z);\n                    }\n                    ctx.stroke();\n                    // --- DEBUG: draw a small red dot at the first path node ---\n                    // (removed for clarity; see animated circle below)\n                    ctx.restore();\n                }\n            }\n        }\n        /* ---------------------------------------- */\n\n        /* ----- draw icons and labels (rotate\u2011only, no scale) ----- */\n        if (!mapData) return;\n        for (const loc of mapData.locations) {\n            if (getGroupIndex(loc.groupId) !== groupIndex) continue;\n\n            // ICONS --------------------------------------------------\n            if (loc.locationDisplayType === LocationDisplayType.Icon) {\n                const entry = loadIcon(iconNameFor(loc));\n                if (entry.loaded) {\n                    // Project world centre \u2192 screen coords (pan + scale + rotate)\n\n\n                    const size = 36;\n                    ctx.save();\n                    // Move to screen position, then un\u2011rotate so icon faces \u201Cnorth\u201D\n                    ctx.translate(loc.center.x, loc.center.z);\n                    ctx.rotate(-rotation);\n                    ctx.scale(1 / scale, 1 / scale); // 3. cancel zoom\n\n                    ctx.drawImage(entry.img, -size / 2, -size / 2, size, size);\n                    ctx.restore();\n                }\n            }\n\n            // LABELS -------------------------------------------------\n            if (loc.locationDisplayType === LocationDisplayType.Label) {\n                const label = loc.name || LocationTypeName[loc.locationType];\n\n                ctx.save();\n\n                ctx.translate(loc.center.x, loc.center.z);\n                ctx.rotate(-rotation);          // upright text\n                ctx.scale(1 / scale, 1 / scale);\n\n                ctx.font = \"20px Arial\";\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillStyle = \"#000\";\n                ctx.fillText(label, 0, 0);\n                ctx.restore();\n            }\n        }\n        ctx.restore();\n    }\n}\n\nlet distanceTraveled = 0; // world-space distance traveled along path\nlet segmentLengths = [];\nlet cumulativeLengths = [];\nlet totalPathLength = 0;\nlet speed = 0.15; // adjust as needed\n\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n\nfunction interpolate(p1, p2, t) {\n    return {\n        x: lerp(p1.x, p2.x, t),\n        y: lerp(p1.z, p2.z, t)\n    };\n}\n\n\nfunction animate() {\n\n    if (!pathFindingResultData) return;\n\n    const group = pathData.groups[groupIndex];\n    const floorResult = pathFindingResultData.floors[group.id];\n    if (!floorResult) return;\n\n    const points = floorResult.nodes;\n    if (!points || points.length < 2) return;\n\n    // advance by fixed world-space distance\n    distanceTraveled = Math.min(distanceTraveled + speed, totalPathLength);\n    // find current segment\n    let segment = 0;\n    while (segment < segmentLengths.length && cumulativeLengths[segment + 1] < distanceTraveled) {\n        segment++;\n    }\n    const segmentStart = cumulativeLengths[segment];\n    const segLen = segmentLengths[segment] || 0;\n    const localT = segLen > 0 ? (distanceTraveled - segmentStart) / segLen : 0;\n    const p1 = points[segment];\n    const p2 = points[segment + 1];\n    const pos = interpolate(p1, p2, localT);\n\n    if (distanceTraveled == totalPathLength == 1) distanceTraveled = 0;\n    // clear overlay and draw animated circle with manual projection\n    ctxOverlay.setTransform(1, 0, 0, 1, 0, 0);\n    ctxOverlay.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n    const rect = canvasMain.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    const pivotX = (rect.width / 2 + pan.x) * dpr;\n    const pivotY = (rect.height / 2 + pan.y) * dpr;\n\n    // world \u2192 scaled\n    const xs = pos.x * scale;\n    const ys = pos.y * scale;\n    // rotated\n    const cosR = Math.cos(rotation);\n    const sinR = Math.sin(rotation);\n    const xr = xs * cosR - ys * sinR;\n    const yr = xs * sinR + ys * cosR;\n    // translated\n    const screenX = xr + pivotX;\n    const screenY = yr + pivotY;\n    const radius = 6;\n    ctxOverlay.beginPath();\n    ctxOverlay.arc(screenX, screenY, radius, 0, Math.PI * 2);\n    ctxOverlay.fillStyle = 'red';\n    ctxOverlay.fill();\n\n    if (distanceTraveled < totalPathLength) {\n        animationFrameId = requestAnimationFrame(animate);\n    }\n}\n\n\n\n/* ---------- pick an alpha based on zoom ---------- */\nfunction labelAlpha(scale) {\n  if (scale >= 9) return 1;      // full opacity\n  if (scale <= 7) return 0;      // fully hidden\n  return (scale - 7) / 2;        // 7 \u2192 0 , 9 \u2192 1\n  // or:  Math.min(Math.max((scale - 7) / 2, 0), 1);\n}\nconst iconCache = new Map();     // filename -> { img, loaded }\n\nfunction loadIcon(filename) {\n    if (iconCache.has(filename)) return iconCache.get(filename);\n\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.src = `https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/${filename}`;   // <- use LocationIcons here\n    const entry = { img, loaded: false };\n    img.onload = () => {\n        entry.loaded = true;\n        drawMainCanvas();                                   // redraw when it finishes\n    };\n    iconCache.set(filename, entry);\n    return entry;\n}\n\nfunction iconNameFor(loc) {\n    switch (LocationTypeName[loc.locationType]) {\n        case \"Exit\": return \"Exit.png\";\n        case \"Entrance\": return \"Entrance.png\";\n        case \"Restroom\": return \"Restroom.png\";\n        case \"Elevator\": return \"Elevator.png\";\n        case \"FireExtinguisher\": return \"FireExtinguisher.png\";\n        case \"Kiosk\": return \"Kiosk.png\";\n        case \"Information\": return \"Information.png\";\n        case \"Current_Kiosk\": return \"KioskCurrent.png\";\n        case \"MedicalKit\": return \"MedicalKit.png\";\n        case \"Stairs\": return \"Stairs.png\";\n        case \"Cafeteria\": return \"Cafeteria.png\";\n    }\n}\n\n\nfunction drawMapLocationSurface(mapLocation, color) {\n    if (mapLocation == null) return;\n    for (var i = 0; i < mapLocation.surfaceBranchKeys.length; i++) {\n        var branchKey = mapLocation.surfaceBranchKeys[i];\n        var branch = pathData.branches[branchKey];\n        if (branch == null) return;\n\n        const verts = branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }));\n        ctx.fillStyle = hexToRgba(color, 0.3);\n\n        ctx.beginPath();\n        ctx.moveTo(verts[0].x, verts[0].y);\n        verts.slice(1).forEach(p => ctx.lineTo(p.x, p.y));\n        ctx.closePath();\n        ctx.fill();\n    }\n}\n\nfunction hexToRgba(hex, alpha = 1) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n\nfunction drawSurface(layer, group) {\n    for (const branch of Object.values(layoutData.branches)) {\n        if (branch.groupId !== group.id || branch.layerId !== layer.id) continue;\n\n        const verts = branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }));\n        ctx.fillStyle = layer.color;\n        ctx.beginPath();\n        ctx.moveTo(verts[0].x, verts[0].y);\n        verts.slice(1).forEach(p => ctx.lineTo(p.x, p.y));\n        ctx.closePath();\n        ctx.fill();\n    }\n}\n\nfunction drawLine(layer, group) {\n    for (const branch of Object.values(layoutData.branches)) {\n        if (branch.groupId !== group.id || branch.layerId !== layer.id) continue;\n\n        const verts = branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }));\n        ctx.lineWidth = layer.lineThickness;\n        ctx.strokeStyle = layer.color;\n        ctx.beginPath();\n        ctx.moveTo(verts[0].x, verts[0].y);\n        verts.slice(1).forEach(p => ctx.lineTo(p.x, p.y));\n        ctx.stroke();\n    }\n}\ndrawMainCanvas();\n\nexport function getGroupIndex(groupId) {\n    if (pathData == null) return -1;\n    for (var g = 0; g < pathData.groups.length; g++) {\n        var group = pathData.groups[g];\n        if (group.id == groupId) return g;\n    }\n    return -1;\n}\n\nexport function getMapLocation(mapLocationId) {\n    if (mapData == null) return null;\n    for (var l = 0; l < mapData.locations.length; l++) {\n        var mapLocation = mapData.locations[l];\n        if (mapLocation.id === mapLocationId) return mapLocation;\n    }\n    return null\n}\n\nexport function setMapData(v) {\n    mapData = new MapData(v);\n    const badgeSpan = document.querySelector('#locationBadge span');\n    badgeSpan.textContent = mapData.name;\n    drawMainCanvas();              // if you want an immediate redraw\n}\n\nexport function setLayoutData(v) {\n    layoutData = new SplineData(v);\n    drawMainCanvas();              // if you want an immediate redraw\n}\n\nexport function setPathData(v) {\n    pathData = new SplineData(v);\n    drawMainCanvas();              // if you want an immediate redraw\n}\n\nexport function setPathFindingResultData(v) {\n    if (v == null) {\n        pathFindingResultData = null;\n        cancelAnimation();\n        ctxOverlay.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n        return;\n    }\n\n    cancelAnimation();\n    setTimeout(() => {\n        pathFindingResultData = new PathFindingResultData(v);\n        updateDirections();\n        focusOnResult();\n        animationFrameId = requestAnimationFrame(animate);\n    }, 0);\n}\n\nexport function focusOnResult() {\n\n    if(!pathFindingResultData) return;\n    var currentGroupId = pathData.groups[groupIndex].id;\n    var floorResult = pathFindingResultData.floors[currentGroupId]\n     let verts = [];\n    // -------- gather vertices ------------------------------------------------\n    const fromLoc = getMapLocation(floorResult.fromId);\n    if (!fromLoc?.surfaceBranchKeys?.length) return;\n    for (let i = 0; i < fromLoc.surfaceBranchKeys.length; i++) {\n        const branchKey = fromLoc.surfaceBranchKeys[i];\n        const branch = pathData?.branches[branchKey];\n        if (!branch) return;\n        verts.push(\n            ...branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }))\n        );\n    }\n\n    const toLoc = getMapLocation(floorResult.toId);\n    if (!toLoc?.surfaceBranchKeys?.length) return;\n    for (let i = 0; i < toLoc.surfaceBranchKeys.length; i++) {\n        const branchKey = toLoc.surfaceBranchKeys[i];\n        const branch = pathData?.branches[branchKey];\n        if (!branch) return;\n        verts.push(\n            ...branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }))\n        );\n    }\n    if (!verts.length) return;\n\n    // --- switch floor first ---------------------------------------------------\n \n    updateFloor(getGroupIndex(toLoc.groupId));\n    focusOnSurface(verts, applyView);\n\n}\n\nexport function cancelAnimation() {\n    if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n        animationFrameId = null;\n    }\n}\n\nexport function computePathMetrics() {\n    segmentLengths = [];\n    cumulativeLengths = [0];\n    totalPathLength = 0;\n    const group = pathData.groups[groupIndex];\n    const floorResult = pathFindingResultData.floors[group.id];\n    if (!floorResult) { totalPathLength = 0; return; }\n    const pts = floorResult.nodes;\n    for (let i = 0; i < pts.length - 1; i++) {\n        const dx = pts[i + 1].x - pts[i].x;\n        const dy = pts[i + 1].z - pts[i].z;\n        const len = Math.hypot(dx, dy);\n        segmentLengths.push(len);\n        cumulativeLengths.push(cumulativeLengths[i] + len);\n    }\n    totalPathLength = cumulativeLengths[cumulativeLengths.length - 1] || 0;\n    distanceTraveled = 0;\n}\n\n\nfunction getNextEntry(dict, currentKey) {\n    const keys = Object.keys(dict);\n    const idx = keys.indexOf(currentKey);\n    if (idx >= 0 && idx + 1 < keys.length) {\n        const nextKey = keys[idx + 1];\n        return nextKey;\n    }\n    return undefined;  // no next entry\n}\n\nexport function updateDirections() {\n    if (pathFindingResultData == null) return;\n    const banner = document.getElementById('directionsBanner');\n    const directionsText = document.getElementById('directions');\n\n    var group = pathData.groups[groupIndex];\n    var floorResult = pathFindingResultData.floors[group.id];\n\n    //user is on the wrong floor, urge user to navigate to the right floor\n    if (!floorResult) {\n        const keys = Object.keys(pathFindingResultData.floors);\n        if (keys.length != 0) {\n            const nextFloorIndex = getGroupIndex(keys[0]);\n            let message = `Please switch map to ${getFloorString(nextFloorIndex)}.`;\n            directionsText.textContent = message;\n            banner.classList.remove('hidden');\n        } else {\n            banner.classList.add('hidden');\n        }\n        return;\n    }\n    var fromMapLocation = getMapLocation(floorResult.fromId);\n    var toMapLocation = getMapLocation(floorResult.toId);\n    if (fromMapLocation == null || toMapLocation == null) return;\n    const fromMapLocationName = fromMapLocation.name ? fromMapLocation.name : LocationTypeName[fromMapLocation.locationType];\n    const toMapLocationName = toMapLocation.name ? toMapLocation.name : LocationTypeName[toMapLocation.locationType];\n\n\n    let distance = '';\n    //Units conversion\n    if (window.IndoorLens.unit == 'm') {\n        distance = floorResult.pathLength.toFixed(1) + ' m';\n    } else {\n        distance = (floorResult.pathLength * 3.28084).toFixed(1) + ' feet';;\n    }\n\n    // --- usage example ---\n    const floors = pathFindingResultData.floors;\n    const curKey = group.id;           // e.g. \"a19282bc\"\n    const nextFloorResult = getNextEntry(floors, curKey);\n    const nextFloorIndex = getGroupIndex(nextFloorResult);\n\n    let message = '';\n    if (nextFloorResult != undefined) {\n        message = `On ${getFloorString(groupIndex)}, from ${fromMapLocationName} ${distance} to ${toMapLocationName}. then to the ${getFloorString(nextFloorIndex)}.`;\n\n    } else {\n        message = `On ${getFloorString(groupIndex)}, from ${fromMapLocationName} ${distance} to ${toMapLocationName}.`;\n    }\n\n\n    directionsText.textContent = message;\n    banner.classList.remove('hidden');\n\n    computePathMetrics();\n    drawMainCanvas();\n}\n\nexport function getFloorString(floorIndex) {\n    if (floorIndex == 0) return 'ground floor';\n    else if (floorIndex == 1) return 'first floor';\n    else if (floorIndex == 2) return 'second floor';\n    else if (floorIndex == 3) return 'third floor';\n    else if (floorIndex == 4) return 'fourth floor';\n    else if (floorIndex == 5) return 'fifth floor';\n    else if (floorIndex == 6) return 'sixth floor';\n    else if (floorIndex == 7) return 'seventh floor';\n    else if (floorIndex == 8) return 'eighth floor';\n    else if (floorIndex == 9) return 'ninth floor';\n    else if (floorIndex == 10) return 'tenth floor';\n}\n\n\n", "// ajax.js  \u2013 vanilla\u2011JS version\n// ----------------------------------------------\n\nconst BASE = \"https://indoorlensmaps.azurewebsites.net/api/\";\nconst FUNCTION_KEY =\n  \"Gh8s0sQm4Uy1U3bW-6MQ2M3U3PXxpPvEngTNcYmLvBPJAzFuc1df1w==\";\n\n/* ------------------------------------------------------------------ */\n/* helper: fetch JSON and throw on non\u2011OK                              */\nasync function getJson(url) {\n  const resp = await fetch(url, { mode: \"cors\" });\n  if (!resp.ok) throw new Error(`${resp.status}\u00A0${resp.statusText} \u2013 ${url}`);\n  return resp.json();\n}\n\n/* ------------------------------------------------------------------ */\n/* load map, layout, path in parallel                                  */\nexport async function loadInitialData({\n  onMap,\n  onLayout,\n  onPath\n}) {\n  const mapId   = window.IndoorLens?.cfg?.mapid ?? \"\";\n  console.log(\"Loading map data for mapId:\", mapId);\n\n  const loadingOverlay = document.getElementById(\"loadingOverlay\");\n  const deadOverlay = document.getElementById(\"deadOverlay\");\n  loadingOverlay?.classList.remove(\"d-none\");\n  deadOverlay?.classList.add(\"d-none\");\n\n  try {\n    const mapUrl    = `${BASE}MapHandler?filename=${mapId}/map.txt&code=${FUNCTION_KEY}`;\n    const layoutUrl = `${BASE}LayoutHandler?filename=${mapId}/layout.txt&code=${FUNCTION_KEY}`;\n    const pathUrl   = `${BASE}PathHandler?filename=${mapId}/path.txt&code=${FUNCTION_KEY}`;\n\n    const [mapJson, layoutJson, pathJson] = await Promise.all([\n      getJson(mapUrl),\n      getJson(layoutUrl),\n      getJson(pathUrl)\n    ]);\n\n    onMap?.(mapJson);\n    onLayout?.(layoutJson);\n    onPath?.(pathJson);\n  } catch (err) {\n    console.error(\"loadInitialData error:\", err);\n    deadOverlay?.classList.remove(\"d-none\");\n  } finally {\n    loadingOverlay?.classList.add(\"d-none\");\n  }\n}\n\n/* ------------------------------------------------------------------ */\n/* fetch a path\u2011finding result                                         */\nexport async function requestPathFinding({\n  onResult\n}) {\n  console.log(\"fromId:\",  window.IndoorLens.cfg.fromid);\n  console.log(\"toId:\",  window.IndoorLens.cfg.toid);\n  console.log(\"WCHR:\",  window.IndoorLens.wchr);\n  \n  const fromId=!window.IndoorLens.fromid? '' : window.IndoorLens.fromid;\n  const toId=!window.IndoorLens.toid?  '' : window.IndoorLens.toid; \n  const wchr= !window.IndoorLens.wchr? true : window.IndoorLens.wchr;\n\n      if (!fromId   ||!toId  ) return;\n  console.log(\"fromId:\", fromId);\n  console.log(\"toId:\", toId);\n  console.log(\"WCHR:\", wchr);\n \n  const mapId   = window.IndoorLens?.cfg?.mapid ?? \"\";\n  const loadingOverlay = document.getElementById(\"loadingOverlay\");\n  const deadOverlay = document.getElementById(\"deadOverlay\");\n\n  loadingOverlay?.classList.remove(\"hidden\");\n  deadOverlay?.classList.add(\"hidden\");\n  console.log(\"Requesting path from\", fromId, \"to\", toId);\n\n  try {\n    const url =\n      `${BASE}PathFindingHandler` +\n      `?code=${FUNCTION_KEY}` +\n      `&mapid=${encodeURIComponent(mapId)}` +\n      `&from=${encodeURIComponent(fromId)}` +\n      `&to=${encodeURIComponent(toId)}` +\n      `&WCHR=${wchr}`;\n\n    const json = await getJson(url);\n    onResult?.(json);\n  } catch (err) {\n    console.error(\"PathFinding fetch error:\", err);\n    deadOverlay?.classList.remove(\"hidden\");\n  } finally {\n    loadingOverlay?.classList.add(\"hidden\");\n  }\n}", "import { LocationTypeName } from './models.js'; // \nimport { drawMainCanvas, setPathFindingResultData, mapData, layoutData, pathData, updateDirections, getFloorString, canvasMain, getMapLocation, focusOnResult } from \"./preview.js\";\nimport { requestPathFinding } from \"./cloud.js\";\nimport { pan, rotation, scale, applyView } from \"./control.js\";\nimport { getGroupIndex, ctxOverlay } from \"./preview.js\";\n//import { ,setPathData,setLayoutData,setMapData} from \"./preview.js\";\n\n/* Fullscreen fallback CSS for Safari */\nconst fsFallbackStyle = document.createElement('style');\nfsFallbackStyle.innerHTML = `\n#canvasroot.force-fullscreen {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 9999;\n}\n`;\ndocument.head.appendChild(fsFallbackStyle);\nexport let groupIndex = 0;\n\n\n\n\nexport function initInputs() {\n\n    /* ---------- group\u00A0\u00B1 buttons ---------- */\n    const btnPlus = document.getElementById('btnPlus');\n    const btnMinus = document.getElementById('btnMinus');\n\n\n    const wchrBtn = document.getElementById('wchr');\n    const walkBtn = document.getElementById('walk');\n\n\n    updateGroupLabel();\n\n    btnPlus.addEventListener('click', () => {\n        const newGroupIndex = Math.min(groupIndex + 1, layoutData.groups.length - 1);\n        updateFloor(newGroupIndex);\n        focusOnResult();\n    });\n\n    btnMinus.addEventListener('click', () => {\n        const newGroupIndex = Math.max(groupIndex - 1, 0);\n        updateFloor(newGroupIndex);\n        focusOnResult();\n    });\n\n\n    walkBtn.addEventListener('click', () => {\n        window.IndoorLens.wchr = true;\n        wchrBtn.style.display = 'flex';\n        walkBtn.style.display = 'none';\n\n        requestPathFinding({\n            // optional; defaults to true\n            onResult: result => {    // matches the onResult param\n                setPathFindingResultData(result);\n            }\n        });\n\n    });\n\n    wchrBtn.addEventListener('click', () => {\n        window.IndoorLens.wchr = false;\n        wchrBtn.style.display = 'none';\n        walkBtn.style.display = 'flex';\n\n        requestPathFinding({\n\n            onResult: result => {    // matches the onResult param\n                setPathFindingResultData(result);\n            }\n        });\n\n    });\n\n    const inputFrom = document.getElementById(\"from\");\n    const inputTo = document.getElementById(\"to\");\n    const resultsListFrom = document.getElementById(\"fromResultsList\");\n    const resultsListTo = document.getElementById(\"toResultsList\");\n    const btnFromClear = document.getElementById(\"btnFromClear\");\n    const btnToClear = document.getElementById(\"btnToClear\");\n    const apiBtn = document.getElementById(\"api\");\n    const centerBtn = document.getElementById(\"center\");\n    const fullScreenBtn = document.getElementById(\"fullscreen\");\n    let fullscreen = false;\n\n    // ---------------------------------------------------------------------------\n    // helper: swap the fullscreen button icon according to current state\n    // expects <button id=\"fullscreen\"><img></button> in the markup\n    function updateFullscreenIcon() {\n        const img = fullScreenBtn.querySelector('img');\n        if (!img) return;\n        img.src = fullscreen ? 'https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Minimize.png'\n            : 'https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Maximize.png';\n    }\n\n    // toggle on every keystroke / paste / delete\n    inputFrom.addEventListener(\"input\", () => {\n        btnFromClear.disabled = inputFrom.value.trim() === \"\";\n\n    });\n\n    // optional: clicking the X clears the field\n    btnFromClear.addEventListener(\"click\", () => {\n        inputFrom.value = \"\";\n        btnFromClear.disabled = true;\n        inputFrom.focus();           // put the cursor back in the box\n        const banner = document.getElementById('directionsBanner');\n        banner.classList.add('hidden');\n\n        window.IndoorLens.fromid = null;\n        setPathFindingResultData(null);\n        drawMainCanvas();\n\n    });\n\n\n    // toggle on every keystroke / paste / delete\n    inputTo.addEventListener(\"input\", () => {\n        btnToClear.disabled = inputTo.value.trim() === \"\";\n    });\n\n    // optional: clicking the X clears the field\n    btnToClear.addEventListener(\"click\", () => {\n        inputTo.value = \"\";\n        btnToClear.disabled = true;\n        inputFrom.focus();           // put the cursor back in the box\n        const banner = document.getElementById('directionsBanner');\n        banner.classList.add('hidden');\n\n        window.IndoorLens.toid = null;\n        setPathFindingResultData(null);\n        drawMainCanvas();\n\n    });\n\n\n    const dlg = document.getElementById('linkDlg');\n    const urlInput = document.getElementById('apiUrl');\n    const copyBtn = document.getElementById('copyBtn');\n\n    /* Copy to clipboard */\n    copyBtn.addEventListener('click', async () => {\n        try {\n            await navigator.clipboard.writeText(urlInput.value);\n            copyBtn.textContent = 'Copied!';\n            setTimeout(() => copyBtn.textContent = 'Copy', 1500);\n            dlg.close();                  // optional: close after copy\n        } catch (err) {\n            alert('Copy failed\u2014please copy manually.');\n        }\n    });\n    // optional: clicking the X clears the field\n    apiBtn.addEventListener(\"click\", () => {\n        const apiEndpoint = `https://www.indoorlens.com/api` +\n            `?mapid=${encodeURIComponent(window.IndoorLens.mapid)}` +\n            `&fromid=${encodeURIComponent(window.IndoorLens.fromid)}` +\n            `&toid=${encodeURIComponent(window.IndoorLens.toid)}` +\n            `&wchr=${window.IndoorLens.wchr}` +\n            `&apikey=${window.IndoorLens.apikey}`;\n        urlInput.value = apiEndpoint;   // set / update\n        dlg.showModal();                // open the <dialog>\n\n        //localhost:5209/api/Index?mapid=d8629cmu&fromid=ac8ce136&toid=1cc69b13&wchr=false&apikey=\n    });\n\n    centerBtn.addEventListener(\"click\", () => {\n        centerView(10);\n    });\n\n    fullScreenBtn.addEventListener(\"click\", () => {\n        const root = document.getElementById('canvasroot');\n\n        // -- modern browsers: toggle native fullscreen -----------------------\n        if (document.fullscreenElement) {\n            // already in FS \u2192 exit\n            if (document.exitFullscreen) document.exitFullscreen();\n            else if (document.webkitExitFullscreen) document.webkitExitFullscreen();\n            // flag + icon will update in fullscreenchange listener\n            return;\n        }\n\n        const requestFS =\n            root.requestFullscreen\n            || root.webkitRequestFullscreen\n            || root.msRequestFullscreen;\n\n        if (requestFS) {\n            requestFS.call(root);\n        } else {\n            // Safari without fullscreen API: fall back to CSS class\n            root.classList.toggle('force-fullscreen');\n            fullscreen = !fullscreen;\n            updateFullscreenIcon();\n            resizeCanvas();\n        }\n    });\n\n    // handle the native fullscreen change event:\n    document.addEventListener('fullscreenchange', () => {\n        fullscreen = !!document.fullscreenElement;\n        updateFullscreenIcon();\n        resizeCanvas();\n    });\n\n\n\n\n    function resizeCanvas() {\n        const root = document.getElementById('canvasroot');\n        // Measure the display size of the root container\n        const width = root.clientWidth;\n        const height = root.clientHeight;\n        // Handle device pixel ratios (for crisp rendering on high-DPI screens)\n        const ratio = window.devicePixelRatio || 1;\n\n        // Set the internal resolution\n        canvasMain.width = Math.floor(width * ratio);\n        canvasMain.height = Math.floor(height * ratio);\n        // Set the CSS display size\n        canvasMain.style.width = width + 'px';\n        canvasMain.style.height = height + 'px';\n\n        // If you have an overlay canvas, update it too\n        if (typeof canvasOverlay !== 'undefined') {\n            canvasOverlay.width = Math.floor(width * ratio);\n            canvasOverlay.height = Math.floor(height * ratio);\n            canvasOverlay.style.width = width + 'px';\n            canvasOverlay.style.height = height + 'px';\n        }\n\n        // Scale the drawing context for the pixel ratio\n        const ctx = canvasMain.getContext('2d');\n        ctx.setTransform(ratio, 0, 0, ratio, 0, 0);\n        // (fullscreen flag is now set elsewhere)\n        // Redraw after resizing\n        drawMainCanvas();\n    }\n\n    /**\n     * Normalize string for case\u2010 and accent\u2010insensitive search\n     */\n    function normalizeForSearch(str) {\n        return str\n            .toLowerCase()\n            .normalize('NFD')\n            .replace(/[\\u0300-\\u036f]/g, '');\n    }\n\n    /**\n     * Search with priority: name \u2192 tags \u2192 type\n     */\n    function searchLocationsWithPriority(locations, query) {\n        const q = normalizeForSearch(query.trim());\n        if (!q) return [];\n\n        const nameMatches = [];\n        const tagMatches = [];\n        const typeMatches = [];\n\n        for (const loc of locations) {\n            const nameStr = normalizeForSearch(loc.name ?? '');\n            const tagsStr = normalizeForSearch(loc.tags ?? '');\n            const typeStr = normalizeForSearch(LocationTypeName[loc.locationType] || '');\n\n            if (nameStr.includes(q)) {\n                nameMatches.push(loc);\n            } else if (tagsStr.includes(q)) {\n                tagMatches.push(loc);\n            } else if (LocationTypeName[loc.locationType] != 'Custom' && typeStr.includes(q)) {\n                typeMatches.push(loc);\n            }\n        }\n\n        // Optional: within each bucket you can sort by earliest position:\n        const sortByIndex = (arr, fieldExtractor) =>\n            arr.sort((a, b) => {\n                const hayA = normalizeForSearch(fieldExtractor(a));\n                const hayB = normalizeForSearch(fieldExtractor(b));\n                return hayA.indexOf(q) - hayB.indexOf(q);\n            });\n\n        sortByIndex(nameMatches, loc => loc.name ?? '');\n        sortByIndex(tagMatches, loc => loc.tags ?? '');\n        sortByIndex(typeMatches, loc => LocationTypeName[loc.locationType] ?? '');\n\n        // Concatenate in priority order:\n        return [...nameMatches, ...tagMatches, ...typeMatches];\n    }\n\n    // reusable autocomplete setup\n    function textSearch(inputEl, resultsEl) {\n        inputEl.addEventListener(\"input\", () => {\n\n            const q = inputEl.value.trim().toLowerCase();\n            if (!q) {\n                resultsEl.innerHTML = \"\";\n                return;\n            }\n            const matches = searchLocationsWithPriority(mapData.locations, q);\n\n\n            resultsEl.innerHTML = matches\n                .map(loc => {\n                    const floor = getGroupIndex(loc.groupId);\n                    const displayName = loc.name\n                        ? loc.name\n                        : LocationTypeName[loc.locationType];\n                    return `<li\n            class=\"list-group-item list-group-item-action p-1\"\n            data-id=\"${loc.id}\"\n          >\n            ${displayName} on ${getFloorString(floor)}\n          </li>`;\n                })\n                .join(\"\");\n        });\n\n        // delegate click handling so you can pick an entry\n        resultsEl.addEventListener(\"click\", e => {\n            const li = e.target.closest(\"li\");\n            if (!li) return;\n            const selectedId = li.dataset.id;\n            const selectedText = li.textContent.trim();\n\n            // set the input value to the chosen text\n            inputEl.value = selectedText;\n            let whichField = inputEl.id;\n            // clear the dropdown\n            resultsEl.innerHTML = \"\";\n\n            // focus on selected surface \n\n            //drawDebugBoundingBox(selectedId) ;\n\n\n            if (whichField == 'from') window.IndoorLens.fromid = selectedId;\n            else if (whichField == 'to') window.IndoorLens.toid = selectedId;\n            if (window.IndoorLens.fromid && window.IndoorLens.toid) {\n                requestPathFinding({\n\n                    onResult: result => {    // matches the onResult param\n                        setPathFindingResultData(result);\n                    }\n                });\n            }\n            else {\n\n                // -------- gather vertices ------------------------------------------------\n                const loc = getMapLocation(selectedId);\n                let verts = [];\n                if (!loc?.surfaceBranchKeys?.length) return;\n\n                for (let i = 0; i < loc.surfaceBranchKeys.length; i++) {\n                    const branchKey = loc.surfaceBranchKeys[i];\n                    const branch = pathData?.branches[branchKey];\n                    if (!branch) return;\n                    verts.push(\n                        ...branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }))\n                    );\n                }\n                if (!verts.length) return;\n\n                let groupIndex = getGroupIndex(loc.groupId);\n\n                // --- switch floor first ---------------------------------------------------\n                updateFloor(groupIndex);\n                focusOnSurface(verts, applyView);\n            }\n            drawMainCanvas();\n\n        });\n    }\n\n    // wire up both fields\n    textSearch(inputFrom, resultsListFrom);\n    textSearch(inputTo, resultsListTo);\n\n    // set initial icon\n    updateFullscreenIcon();\n}   // end initInputs\n\n\n\nexport function updateFloor(newGroupIndex) {\n\n    if (!layoutData) return;\n    groupIndex = newGroupIndex;\n    updateGroupLabel();\n    updateDirections();\n\n    drawMainCanvas();\n}\n\nfunction updateGroupLabel() {\n    const groupLbl = document.getElementById('groupLabel');\n    groupLbl.textContent = groupIndex;\n}\n\n\n\n// --- helper: reset view so world origin sits in the canvas centre -----------\nexport function centerView(targetScale = 6) {\n    applyView({ panX: 0, panY: 0, rotation: 0, scale: targetScale });\n}\n\n\n/**\n * Smoothly pans & zooms so that all `nodes` fit in the view, following the\n * exact canvas transform order used in drawMainCanvas:\n *\n *     translate( pivotX(rect/2 + pan) )  \u2218  rotate(rotation)  \u2218  scale(scale)\n *\n * That means:\n *   1. `scale` is in **buffer\u2011pixels per world unit**.\n *   2. `pan.x / pan.y` are in **CSS pixels** (added before the dpr factor).\n *\n * The math below respects those units so the final fit works at any rotation\n * or device\u2011pixel ratio.\n *\n * @param {Array<{x:number,y:number}>} nodes\n * @param {number} groupIndex\n * @param {(state:{panX:number,panY:number,scale:number})=>void} applyView\n * @param {{padding?:number,duration?:number,minScale?:number,maxScale?:number}} opts\n */\nexport function focusOnSurface(\n    verts,\n    applyView,\n    {\n        padding = 150,      // screen px (CSS)\n        duration = 500,\n        minScale = 0.5,\n        maxScale = 100      // practically unlimited\n    } = {}\n) {\n    /* 0. prepare ------------------------------------------------------------ */\n    const dpr = window.devicePixelRatio || 1;\n    const cosR = Math.cos(rotation);\n    const sinR = Math.sin(rotation);\n\n    /* 1. rotate every vertex into screen\u2011aligned coordinates ---------------- */\n    let minRX = Infinity, minRY = Infinity;\n    let maxRX = -Infinity, maxRY = -Infinity;\n\n    verts.forEach(({ x, y }) => {\n        const xr = cosR * x - sinR * y;\n        const yr = sinR * x + cosR * y;\n\n        minRX = Math.min(minRX, xr); minRY = Math.min(minRY, yr);\n        maxRX = Math.max(maxRX, xr); maxRY = Math.max(maxRY, yr);\n    });\n\n    const bboxW = Math.max(maxRX - minRX, 1e-6);\n    const bboxH = Math.max(maxRY - minRY, 1e-6);\n\n    /* 2. choose target scale (buffer px / world unit) ---------------------- */\n    const availW = canvasMain.width - padding * dpr * 2;\n    const availH = canvasMain.height - padding * dpr * 2;\n    let targetScale = Math.min(availW / bboxW, availH / bboxH);\n    targetScale = Math.max(minScale, Math.min(maxScale, targetScale));\n\n    /* 3. centre of rotated bbox ------------------------------------------- */\n    const cRX = (minRX + maxRX) / 2;\n    const cRY = (minRY + maxRY) / 2;\n\n    const panX_target = -(targetScale / dpr) * cRX;\n    const panY_target = -(targetScale / dpr) * cRY;\n\n    /* 4. animate ----------------------------------------------------------- */\n    const startScale = scale;\n    const startPanX = pan.x;\n    const startPanY = pan.y;\n    const t0 = performance.now();\n\n    const ease = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n    const lerp = (a, b, t) => a + (b - a) * t;\n\n    function step(now) {\n        const traw = Math.min((now - t0) / duration, 1);\n        const t = ease(traw);\n\n        const currScale = lerp(startScale, targetScale, t);\n        const currPanX = lerp(startPanX, panX_target, t);\n        const currPanY = lerp(startPanY, panY_target, t);\n\n        applyView({ panX: currPanX, panY: currPanY, rotation, scale: currScale });\n\n        if (traw < 1) requestAnimationFrame(step);\n    }\n    requestAnimationFrame(step);\n}\n\n\n\n/* -------------------------------------------------------------------------- */\n/*                         debug: draw a bounding box                         */\n/* -------------------------------------------------------------------------- */\n/**\n * Paint a dashed debug rectangle that hugs the world\u2011space AABB of the first\n * surface attached to `fromId`.  We draw in world units *after* applying the\n * very same transforms used in drawMainCanvas, so the rectangle never drifts\n * regardless of dpr, zoom, or pan units.\n *\n * Call once per frame while debugging.\n *\n * @param {string} stroke \u2013 outline colour (default '#ff00ff')\n * @param {number} width  \u2013 outline thickness in *screen* pixels (default 2)\n */\nexport function drawDebugBoundingBox(mapLocationId, currScale, stroke = '#ff00ff', width = 2) {\n    // -------- gather vertices ------------------------------------------------\n    const loc = getMapLocation(mapLocationId);\n    if (!loc?.surfaceBranchKeys?.length) return;\n\n    const branch = pathData?.branches[loc.surfaceBranchKeys[0]];\n    if (!branch) return;\n\n    const verts = branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }));\n    if (!verts.length) return;\n\n    // -------- world\u2011space bounds --------------------------------------------\n    let minX = Infinity, minY = Infinity;\n    let maxX = -Infinity, maxY = -Infinity;\n    for (const v of verts) {\n        minX = Math.min(minX, v.x); minY = Math.min(minY, v.y);\n        maxX = Math.max(maxX, v.x); maxY = Math.max(maxY, v.y);\n    }\n\n    // -------- clear overlay & copy render transform -------------------------\n    ctxOverlay.setTransform(1, 0, 0, 1, 0, 0);\n    ctxOverlay.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvasMain.getBoundingClientRect();\n    const pivotX = (rect.width / 2 + pan.x) * dpr;\n    const pivotY = (rect.height / 2 + pan.y) * dpr;\n\n    ctxOverlay.translate(pivotX, pivotY);\n    ctxOverlay.rotate(rotation);\n    ctxOverlay.scale(scale, scale);\n\n    // -------- draw rectangle in world units ---------------------------------\n    ctxOverlay.save();\n    ctxOverlay.setLineDash([6, 4]);\n    ctxOverlay.strokeStyle = stroke;\n    ctxOverlay.lineWidth = width / scale;   // keep width in screen px\n    ctxOverlay.strokeRect(minX, minY, maxX - minX, maxY - minY);\n    ctxOverlay.restore();\n\n    // schedule next frame\n    requestAnimationFrame(() => drawDebugBoundingBox(mapLocationId, currScale, stroke, width));\n}\n\n", "import { loadInitialData, requestPathFinding } from \"./cloud.js\";\n\nimport { initInputs, updateFloor, focusOnSurface } from \"./inputs.js\";\nimport { setMapData, setLayoutData, setPathFindingResultData, setPathData, initCanvas, getMapLocation, getFloorString, getGroupIndex, pathData } from \"./preview.js\";\nimport { applyView } from \"./control.js\";\n\nexport class IndoorLensWidget {\n  constructor(root, opts) {\n    this.root = root;          // <div> host element\n    this.opts = opts;\n    injectIndoorLensCSS();       // inject CSS once\n    // build all DOM elements inside the host and get references\n    const refs = buildIndoorLensDOM(this.root, { width: this.opts.width, height: this.opts.height });\n\n    this.loadingOverlay = refs.loadingOverlay;\n    this.deadOverlay = refs.deadOverlay;\n\n\n    // initialize canvas rendering\n    initCanvas(refs.canvasMain, refs.canvasOverlay);\n    // attach event listeners on inputs and buttons\n    initInputs(this.root);\n\n    // load data + show spinner\n    this.initLogic();\n  }\n\n  /* attach listeners + load map / layout / path */\n  initLogic() {\n    // set current map and show spinner\n    //  window.IndoorLens.mapid = this.opts.mapid;\n    this.loadingOverlay?.classList.remove(\"hidden\");\n\n    // load initial map/layout/path data\n    loadInitialData({\n      onMap: json => setMapData(json),\n      onLayout: json => setLayoutData(json),\n      onPath: json => setPathData(json)\n    })\n      .finally(() => {\n        // hide spinner when done\n        this.loadingOverlay?.classList.add(\"hidden\");\n        apiRequest();\n      });\n  }\n}\n\n\nfunction apiRequest() {\n  const fromId = window.IndoorLens.fromid;\n  const toId = window.IndoorLens.toid;\n  const wchr = window.IndoorLens.wchr;\n  const isapi = !window.IndoorLens.isapi? false : window.IndoorLens.isapi;\n\n  const inputFrom = document.getElementById(\"from\");\n  const inputTo = document.getElementById(\"to\");\n  const wchrBtn = document.getElementById('wchr');\n  const walkBtn = document.getElementById('walk');\n  const apiBtn = document.getElementById('api');\n\n  if (isapi) {\n    apiBtn.style.display = 'none';\n   } else{\n        apiBtn.style.display = 'flex';\n   }\n  \n  if (!wchr) {\n    wchrBtn.style.display = 'none';\n    walkBtn.style.display = 'flex';\n  } else {\n    wchrBtn.style.display = 'flex';\n    walkBtn.style.display = 'none';\n  }\n\n  if (fromId) {\n    const fromMapLocation = getMapLocation(fromId);\n    inputFrom.value = `${fromMapLocation.name} on ${getFloorString(getGroupIndex(fromMapLocation.groupId))}`;\n    inputFrom.disabled = true;\n  }\n\n  if (toId) {\n    const toMapLocation = getMapLocation(toId);\n    inputTo.value = `${toMapLocation.name} on ${getFloorString(getGroupIndex(toMapLocation.groupId))}`;\n    inputTo.disabled = true;\n  }\n\n  if (fromId && toId) {\n    requestPathFinding({\n      fromId,                  // same\u2011name shorthand\n      toId,\n      WCHR: wchr,             // optional; defaults to true\n      onResult: result => {    // matches the onResult param\n        setPathFindingResultData(result);\n      }\n    });\n  } else {\n\n    if (!toId) return;\n    // -------- gather vertices ------------------------------------------------\n    const toMapLocation = getMapLocation(toId);\n    let verts = [];\n    if (!toMapLocation?.surfaceBranchKeys?.length) return;\n\n    for (let i = 0; i < toMapLocation.surfaceBranchKeys.length; i++) {\n      const branchKey = toMapLocation.surfaceBranchKeys[i];\n      const branch = pathData?.branches[branchKey];\n      if (!branch) return;\n      verts.push(\n        ...branch.nodes.map(n => ({ x: n.position.x, y: n.position.z }))\n      );\n    }\n    if (!verts.length) return;\n\n    let groupIndex = getGroupIndex(toMapLocation.groupId);\n\n    // --- switch floor first ---------------------------------------------------\n    updateFloor(groupIndex);\n    focusOnSurface(verts, applyView);\n  }\n}\n\nfunction injectIndoorLensCSS() {\n  if (document.getElementById(\"indoorlens\u2011css\")) return;  // already added\n  const style = document.createElement(\"style\");\n  style.id = \"indoorlens\u2011css\";\n  style.textContent = `\n  /* ---------- page\u2011level layout ------------------------------------------------ */\n  .page-container{min-height:100vh;display:flex;flex-direction:column;justify-content:center;align-items:center;position:relative;margin:0;}\n\n    .canvas-overlay{position:absolute; top:0; left:0; z-index:2; pointer-events:none;}\n  .canvas-wrapper{position:relative;display:inline-block;html, font-family: 'Roboto', sans-serif;}\n  .canvas-border{border:1px solid #343a40;background:#eee;display:block;}\n\n  .loading-overlay{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background:#fff;z-index:20;}\n  .loading-overlay.hidden{display:none;}\n  @keyframes spin360{to{transform:rotate(360deg);}}\n  .spin{width:64px;height:64px;animation:spin360 1.2s linear infinite;}\n\n \n\n  .top-bar{display:flex;   flex-wrap: wrap;   gap: .5rem;align-items:stretch;position:absolute;top:0;left:0;width:100%;z-index:10;padding:4px;gap:4px;box-sizing:border-box;}\n\n  .flex-col{flex:1 1 0;position:relative;}\n  .input-group{display:flex;align-items:stretch;font-size:.875rem;margin-bottom:0;}\n  .input-tag{background:#333;border:1px solid #555;border-right:0;padding:.375rem .5rem;display:flex;align-items:center;color:#eee;}\n  .input-field{flex:1 1 0;border:1px solid #555;background:#222;color:#fff;padding:.375rem .5rem;font-size:.875rem;}\n  .input-clear{background:#444;color:#fff;border:none;width:2rem;display:flex;align-items:center;justify-content:center;cursor:pointer; border-top-right-radius:0.25rem; border-bottom-right-radius:0.25rem;border-top-left-radius:0; border-bottom-left-radius:0;}\n  .input-clear:disabled{opacity:.4;cursor:default;}\n\n  .results-list{position:absolute;left:0;right:0;top:100%;margin-top:.25rem;z-index:11;max-height:200px;overflow-y:auto;list-style:none;padding:0;background:#222; border:1px solid #555;color:#fff;text-align:left;}\n  .results-list li{padding:.25rem .5rem;cursor:pointer;color:inherit;text-align:left;}\n  .results-list li:hover{background:#3a3a3a;}\n  .results-list:empty{display:none;}\n\n \n/* Mobile stack: each flex-col (From/To) gets its own row */\n@media (max-width: 768px) {\n\n \n  .top-bar {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: 0.5rem;          /* space between rows */\n  }\n\n  .flex-col {\n    flex: none;           /* cancel the default flex:1 1 0 */\n    width: 100%;          /* full width of the .top-bar */\n  }\n\n  /* keep the label/field/button in one line */\n  .input-group {\n    display: flex;\n    flex-wrap: nowrap !important;\n   align-items: stretch;  /* children (including .input-clear) fill the group height */\n  }\n  .input-field {\n    flex: 1 1 auto;\n    min-width: 0;\n  }\n \n  .input-clear {\n    flex: 0 0 auto;\n  }\n\n  .input-tag {\n  flex: 0 0 4rem;      /* never shrink or grow, always 4rem wide */\n  min-width: 4rem;     /* ensures the same baseline width */\n  text-align: center;  /* center the text within the label */\n  }\n\n \n  .input-clear {\n    align-self: stretch;   /* full height */\n    border-top-right-radius: 0.25rem;\n    border-bottom-right-radius: 0.25rem;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n \n  .brand-badge span,\n    .location-badge   span {\n      font-size: 10px;\n      align-self: flex-end;\n    }\n\n    .top-bar,\n    #groupPanel,\n    .accessibility-btn {\n      transform: scale(0.8);\n      transform-origin: top left;\n    }\n    \n    /* Since scale shrinks the box but not the space it occupies,\n      you may need to pull it back up/left a bit: */\n    .top-bar   {     width: calc(100% / 0.8);     }\n    #groupPanel { margin-right: -0.2rem; }\n}\n  .brand-badge,\n  .location-badge {\n    position: absolute;\n    bottom: 7px;\n    display: flex; align-items: center;\n    font-family: 'Roboto', sans-serif;\n  }\n\n  .brand-badge {left: 7px;}\n  .location-badge {right: 7px;}\n\n  .brand-badge img,\n  .location-badge img {\n    width: 20px;\n    height: 20px;\n \n  }\n \n   .brand-badge span,\n  .location-badge   span {\n \n  color: #0c0c0c;\n  font-family: 'Roboto', sans-serif;\n   align-self: flex-end;\n}\n   #otherPanel{position:absolute;right:7px;\n   top:30% ;\n   transform:translateY(-50%);display:flex;flex-direction:column;align-items:center;background:rgba(0,0,0,.2);border:2px solid #ffffff33;border-radius:.3rem; }\n\n  #floorPanel{position:absolute;right:7px;top:50%;transform:translateY(-50%);display:flex;flex-direction:column;align-items:center;background:rgba(0,0,0,.2);border:2px solid #ffffff33;border-radius:.3rem; }\n  #floorPanel span{color:#fff;font-weight:600; }\n  .panel-btn{width:28px;height:28px;padding:0;margin-bottom:.25rem;background:#444;border:1px solid #555;font-size:1rem;line-height:1;display:flex;align-items:center;justify-content:center;cursor:pointer;color:#fff;border-radius:.25rem;}\n  .panel-btn:last-child{margin-bottom:0;}\n  .hidden{display:none;}\n\n\n/* Container sits just under the top-bar */\n.directions-banner {\n  \n  width: 100%;\n  box-sizing: border-box;\n  padding: 0.5rem 1rem;\n  background: rgba(0, 0, 0, 0.75);\n  color: #fff;\n  font-family: 'Roboto', sans-serif;\n  font-size: 0.875rem;\n  text-align: center;\n   z-index: 15;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n\n/* Hide by default */\n.directions-banner.hidden {\n  opacity: 0;\n  visibility: hidden;\n}\n\n/* Show by removing \u201Chidden\u201D */\n.directions-banner:not(.hidden) {\n  opacity: 1;\n  visibility: visible;\n}\n\n dialog {border: none; border-radius: 8px; padding: 1.5rem; box-shadow: 0 4px 12px #0003;   width: 50%;max-width: 600px;margin: auto;  }\n.api-input {width: 100%; margin: .75rem 0 1rem; padding: .5rem; font-family: monospace;}\n.btn-row { display: flex; gap: .5rem; justify-content: flex-end; }\n\n\n  `;\n  document.head.appendChild(style);\n}\n\n/**\n * Dynamically constructs the HTML/CSS structure for the map widget.\n * @param {HTMLElement} host  container to append into\n * @param {{width:number, height:number}} opts\n * @returns {Object} references to created elements\n */\nexport function buildIndoorLensDOM(host, { width = 1000, height = 600 } = {}) {\n  // Ensure styles are loaded\n  injectIndoorLensCSS();\n\n\n\n  // wrapper container: responsive sizing\n  const wrapper = document.createElement(\"div\");\n  wrapper.className = \"canvas-wrapper\";\n  wrapper.id = \"canvasroot\";\n  const cssWidth = typeof width === 'number' ? `${width}px` : width;\n  const cssHeight = typeof height === 'number' ? `${height}px` : height;\n  wrapper.style.width = cssWidth;\n  wrapper.style.height = cssHeight;\n  host.appendChild(wrapper);\n\n  // canvas fills wrapper\n  const canvasMain = document.createElement(\"canvas\");\n  canvasMain.id = \"canvasMain\";\n  canvasMain.className = \"canvas-border\";\n  canvasMain.style.width = \"100%\";\n  canvasMain.style.height = \"100%\";\n  wrapper.appendChild(canvasMain);\n\n  // after layout, size internal buffer for high-DPR\n  requestAnimationFrame(() => {\n    const rect = canvasMain.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvasMain.width = Math.round(rect.width * dpr);\n    canvasMain.height = Math.round(rect.height * dpr);\n    const ctx = canvasMain.getContext(\"2d\");\n    ctx.scale(dpr, dpr);\n  });\n\n  const canvasOverlay = document.createElement(\"canvas\");\n  canvasOverlay.id = \"canvasOverlay\";\n  canvasOverlay.className = \"canvas-overlay\";\n  canvasOverlay.style.width = \"100%\";\n  canvasOverlay.style.height = \"100%\";\n  wrapper.appendChild(canvasOverlay);\n\n  // after layout, size internal buffer for high-DPR\n  requestAnimationFrame(() => {\n    const rect = canvasOverlay.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvasOverlay.width = Math.round(rect.width * dpr);\n    canvasOverlay.height = Math.round(rect.height * dpr);\n    const ctx = canvasOverlay.getContext(\"2d\");\n    ctx.scale(dpr, dpr);\n  });\n\n\n  // overlays\n  wrapper.insertAdjacentHTML(\"beforeend\", `\n    <div id=\"loadingOverlay\" class=\"loading-overlay hidden\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Loader.png\" class=\"spin\" alt=\"loading\"/>\n    </div>\n    <div id=\"deadOverlay\" class=\"loading-overlay hidden\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Dead.png\" alt=\"dead\"/>\n    </div>`);\n\n  const loadingOverlay = wrapper.querySelector('#loadingOverlay');\n  const deadOverlay = wrapper.querySelector('#deadOverlay');\n\n  // top bar with from/to and buttons\n  wrapper.insertAdjacentHTML(\"beforeend\", `\n    <div class=\"top-bar\">\n      <div class=\"flex-col\">\n        <div class=\"input-group\">\n          <span class=\"input-tag\">From</span>\n          <input id=\"from\" type=\"text\" class=\"input-field\" placeholder=\"Search from\u2026\" />\n          <button id=\"btnFromClear\" class=\"input-clear\" disabled>&times;</button>\n        </div>\n        <ul id=\"fromResultsList\" class=\"results-list\"></ul>\n      </div>\n\n      <div class=\"flex-col\">\n        <div class=\"input-group\">\n          <span class=\"input-tag\">To</span>\n          <input id=\"to\" type=\"text\" class=\"input-field\" placeholder=\"Search to\u2026\" />\n          <button id=\"btnToClear\" class=\"input-clear\"  disabled>&times;</button>\n        </div>\n        <ul id=\"toResultsList\" class=\"results-list\"></ul>\n      </div>\n       <div id=\"directionsBanner\" class=\"directions-banner hidden\">\n  <p id=\"directions\">Turn right at the escalator, then go straight for 30 m.</p>\n</div> \n    </div>  \n\n    `);\n\n  // brand badge\n  wrapper.insertAdjacentHTML(\"beforeend\", `\n    <div class=\"brand-badge\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/IconDark.png\" alt=\"IndoorLens icon\" />\n      <span>IndoorLens.com</span>\n    </div>\n\n    <div id=\"locationBadge\" class=\"location-badge\"  >\n      <span></span>\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/LocationPin.png\" alt=\"IndoorLens location\" />\n    </div>\n`);\n\n\n  // settings panel\n  wrapper.insertAdjacentHTML(\"beforeend\", `\n    <div id=\"floorPanel\">\n      <button id=\"btnPlus\" class=\"panel-btn\">+</button>\n      <span id=\"groupLabel\">0</span>\n      <button id=\"btnMinus\" class=\"panel-btn\">\u2212</button>\n    </div>\n\n   <div id=\"otherPanel\">\n      <button id= \"fullscreen\" class=\"panel-btn\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Maximize.png\" alt=\"fullscreen link\" width=\"16\" height=\"16\">\n      </button>\n      <button id= \"center\" class=\"panel-btn\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Center.png\" alt=\"fullscreen link\" width=\"16\" height=\"16\">\n      </button>\n\n      <button id=  \"wchr\" class=\"panel-btn hidden\">\n           <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Wchr.png\" alt=\"Wheelchair\" width=\"16\" height=\"16\">\n      </button>\n      <button id= \"walk\" class=\"panel-btn\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Walk.png\" alt=\"Walk\" width=\"16\" height=\"16\">\n      </button>\n\n      <button id= \"api\" class=\"panel-btn\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Api.png\" alt=\"API link\" width=\"16\" height=\"16\">\n      </button>\n    </div>`);\n\n  // dialog panel\n  wrapper.insertAdjacentHTML(\"beforeend\", `\n    <dialog id=\"linkDlg\">\n      <form method=\"dialog\">                 <!-- lets \u201CEsc\u201D or \u2715 close it -->\n        <h3>API Endpoint</h3>\n\n        <!-- the link text (editable via JS) -->\n        <input id=\"apiUrl\" type=\"text\" readonly class=\"api-input\">\n\n        <div class=\"btn-row\">\n          <button id=\"copyBtn\" type=\"button\">Copy</button>\n          <button type=\"submit\">Close</button>\n        </div>\n      </form>\n    </dialog>\n    `);\n\n  // return refs\n  return {\n    canvasMain: canvasMain,\n    canvasOverlay: canvasOverlay,\n    loadingOverlay: loadingOverlay,\n    deadOverlay: deadOverlay\n  };\n}", "\n\n// /wwwroot/js/indoorlens.js  (the file you called \u201Cfactory\u201D)\n\n/* 1. import the functional modules  */\nimport \"./models.js\";        // defines Vec3, enums, data classes\nimport \"./inputs.js\";        // attaches input listeners, exposes events\nimport \"./cloud.js\";          // data loading helpers\nimport \"./control.js\";       // UI buttons, group +/- logic\n\n\n/* ---------- public init: builds a widget on the given host ---------------- */\nexport function init(options = {}) {\n  const cfg = Object.assign(\n    { },\n    options\n  );\n\n  // expose basic config on window for other modules that rely on it\n  window.IndoorLens = window.IndoorLens || {};\n  window.IndoorLens.cfg = { target: cfg.target,mapid: cfg.mapid, apikey: cfg.apikey,unit: cfg.unit ,\n     fromid: cfg.fromid ,toid: cfg.toid,wchr: cfg.wchr,isapi: cfg.isapi };\n  // expose mapid and apiKey directly for legacy access\n\n  window.IndoorLens.mapid = cfg.mapid;\n  window.IndoorLens.fromid = cfg.fromid;\n  window.IndoorLens.toid = cfg.toid;\n  window.IndoorLens.apikey = cfg.apikey;\n  window.IndoorLens.unit = cfg.unit;\n  window.IndoorLens.wchr = cfg.wchr;\n  window.IndoorLens.isapi = cfg.isapi;\n\n  const host =\n    typeof cfg.target === \"string\"\n      ? document.querySelector(cfg.target)\n      : cfg.target;\n\n  if (!host) {\n    throw new Error(\"IndoorLens: target element not found\");\n  }\n\n  import(\"./indoorlenswidjet.js\").then(({ IndoorLensWidget }) => {\n    // do this:\n\n    const widget= new IndoorLensWidget(host, cfg);\n \n  //  window.IndoorLens = window.IndoorLens || {};\n   window.IndoorLensWidget = widget;\n  });\n}\n/* make the API available to non\u2011module scripts*/\nif (typeof window !== \"undefined\") {\n  window.IndoorLens = window.IndoorLens || {};\n  window.IndoorLens.init = init;   // \u2190 attaches the function\n} "],
  "mappings": "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",
  "names": ["RenderType", "RenderTypeName", "NavigationColors", "NodeModel", "BranchModel", "FloorResultModel", "PathFindingResultData", "LayerModel", "GroupModel", "SplineData", "LocationType", "LocationTypeName", "LocationDisplayType", "LocationDisplayTypeName", "LocationModel", "MapLocationModel", "MapData", "Vec3", "init_models", "__esmMin", "src", "groupId", "floorPayload", "c", "l", "dict", "bData", "branch", "g", "b", "obj", "applyView", "panX", "pan", "panY", "newRotation", "newScale", "scale", "rotation", "drawMainCanvas", "attachControls", "canvas", "rotating", "rotateVelocity", "lastWheelTime", "e", "factor", "now", "rect", "mx", "my", "dTheta", "r", "rot", "z", "lastTouches", "t0", "t1", "u0", "u1", "dx", "dy", "prevMidX", "prevMidY", "currMidX", "currMidY", "prevDist", "prevAng", "dAng", "isDragging", "lastMousePos", "tick", "dt", "vx", "vy", "angle", "cos", "sin", "init_control", "__esmMin", "init_preview", "initCanvas", "_canvasMain", "_canvasOverlay", "canvasMain", "canvasOverlay", "ctx", "ctxOverlay", "attachControls", "drawMainCanvas", "layoutData", "dpr", "rect", "pivotX", "pan", "pivotY", "rotation", "scale", "g", "groupIndex", "group", "layer", "RenderType", "drawSurface", "drawLine", "alpha", "labelAlpha", "pathFindingResultData", "groupId", "floorResult", "getGroupIndex", "fromLoc", "getMapLocation", "toLoc", "LocationTypeName", "drawMapLocationSurface", "NavigationColors", "fromMapLocation", "toMapLocation", "verts", "k", "mapData", "loc", "LocationDisplayType", "entry", "loadIcon", "iconNameFor", "label", "lerp", "a", "b", "t", "interpolate", "p1", "p2", "animate", "pathData", "points", "distanceTraveled", "speed", "totalPathLength", "segment", "segmentLengths", "cumulativeLengths", "segmentStart", "segLen", "localT", "pos", "xs", "ys", "cosR", "sinR", "xr", "yr", "screenX", "screenY", "radius", "animationFrameId", "filename", "iconCache", "img", "mapLocation", "color", "i", "branchKey", "branch", "n", "hexToRgba", "p", "hex", "r", "mapLocationId", "l", "setMapData", "v", "MapData", "badgeSpan", "setLayoutData", "SplineData", "setPathData", "setPathFindingResultData", "cancelAnimation", "PathFindingResultData", "updateDirections", "focusOnResult", "currentGroupId", "updateFloor", "focusOnSurface", "applyView", "computePathMetrics", "pts", "dx", "dy", "len", "getNextEntry", "dict", "currentKey", "keys", "idx", "banner", "directionsText", "nextFloorIndex", "message", "getFloorString", "fromMapLocationName", "toMapLocationName", "distance", "floors", "curKey", "nextFloorResult", "floorIndex", "init_preview", "__esmMin", "init_models", "init_control", "init_inputs", "getJson", "url", "resp", "loadInitialData", "onMap", "onLayout", "onPath", "mapId", "loadingOverlay", "deadOverlay", "mapUrl", "BASE", "FUNCTION_KEY", "layoutUrl", "pathUrl", "mapJson", "layoutJson", "pathJson", "err", "requestPathFinding", "onResult", "fromId", "toId", "wchr", "json", "init_cloud", "__esmMin", "initInputs", "btnPlus", "btnMinus", "wchrBtn", "walkBtn", "updateGroupLabel", "newGroupIndex", "groupIndex", "layoutData", "updateFloor", "focusOnResult", "requestPathFinding", "result", "setPathFindingResultData", "inputFrom", "inputTo", "resultsListFrom", "resultsListTo", "btnFromClear", "btnToClear", "apiBtn", "centerBtn", "fullScreenBtn", "fullscreen", "updateFullscreenIcon", "img", "drawMainCanvas", "dlg", "urlInput", "copyBtn", "apiEndpoint", "centerView", "root", "requestFS", "resizeCanvas", "width", "height", "ratio", "canvasMain", "normalizeForSearch", "str", "searchLocationsWithPriority", "locations", "query", "q", "nameMatches", "tagMatches", "typeMatches", "loc", "nameStr", "tagsStr", "typeStr", "LocationTypeName", "sortByIndex", "arr", "fieldExtractor", "a", "b", "hayA", "hayB", "textSearch", "inputEl", "resultsEl", "matches", "mapData", "floor", "getGroupIndex", "displayName", "getFloorString", "e", "li", "selectedId", "selectedText", "whichField", "getMapLocation", "verts", "i", "branchKey", "branch", "pathData", "n", "focusOnSurface", "applyView", "updateDirections", "groupLbl", "targetScale", "padding", "duration", "minScale", "maxScale", "dpr", "cosR", "rotation", "sinR", "minRX", "minRY", "maxRX", "maxRY", "x", "y", "xr", "yr", "bboxW", "bboxH", "availW", "availH", "cRX", "cRY", "panX_target", "panY_target", "startScale", "scale", "startPanX", "pan", "startPanY", "t0", "ease", "t", "lerp", "step", "now", "traw", "currScale", "currPanX", "currPanY", "fsFallbackStyle", "init_inputs", "__esmMin", "init_models", "init_preview", "init_cloud", "init_control", "indoorlenswidjet_exports", "__export", "IndoorLensWidget", "buildIndoorLensDOM", "apiRequest", "fromId", "toId", "wchr", "isapi", "inputFrom", "inputTo", "wchrBtn", "walkBtn", "apiBtn", "fromMapLocation", "getMapLocation", "getFloorString", "getGroupIndex", "toMapLocation", "requestPathFinding", "result", "setPathFindingResultData", "verts", "i", "branchKey", "branch", "pathData", "n", "groupIndex", "updateFloor", "focusOnSurface", "applyView", "injectIndoorLensCSS", "style", "host", "width", "height", "wrapper", "cssWidth", "cssHeight", "canvasMain", "rect", "dpr", "canvasOverlay", "loadingOverlay", "deadOverlay", "init_indoorlenswidjet", "__esmMin", "init_cloud", "init_inputs", "init_preview", "init_control", "root", "opts", "refs", "initCanvas", "initInputs", "loadInitialData", "json", "setMapData", "setLayoutData", "setPathData", "init_models", "init_inputs", "init_cloud", "init_control", "init", "options", "cfg", "host", "IndoorLensWidget", "widget"]
}
